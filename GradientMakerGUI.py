##Special thanks to ThePhisics101 for helping fix some buttons on the GUI

from tkinter import *
from turtle import *
from tkinter.colorchooser import *
from tkinter.simpledialog import *
import functools
import math
panel = Tk()
selectionShape = IntVar()
colorMatrix = []
colorC = 0
for x in range(150):
    colorMatrix += [[0, 0, 0]]

def btn_click():
    get_shape()
hideturtle()
colormode(255)
tracer(1000)

class DrawClass(object):
    def __init__(self):  ## Initialize global variables
        ## Dont mind these few lines, they're just...really long...
        register_shape("Quatre",((0,0), (1,0), (1.02,0), (1.05,0), (1.07,0), (1.09,0), (1.12,0.01), (1.14,0.01), (1.16,0.01), (1.19,0.02), (1.21,0.02), (1.23,0.03), (1.26,0.03), (1.28,0.04), (1.30,0.05), (1.32,0.05), (1.35,0.06), (1.37,0.07), (1.39,0.08), (1.41,0.09), (1.43,0.10), (1.45,0.11), (1.47,0.12), (1.50,0.13), (1.52,0.14), (1.54,0.16), (1.56,0.17), (1.58,0.18), (1.59,0.20), (1.61,0.21), (1.63,0.22), (1.65,0.24), (1.67,0.26), (1.68,0.27), (1.70,0.29), (1.72,0.30), (1.73,0.32), (1.75,0.34), (1.77,0.36), (1.78,0.37), (1.79,0.39), (1.81,0.41), (1.82,0.43), (1.84,0.45), (1.85,0.47), (1.86,0.49), (1.87,0.51), (1.88,0.53), (1.89,0.55), (1.90,0.57), (1.91,0.60), (1.92,0.62), (1.93,0.64), (1.94,0.66), (1.95,0.68), (1.96,0.71), (1.96,0.73), (1.97,0.75), (1.97,0.77), (1.98,0.80), (1.98,0.82), (1.99,0.84), (1.99,0.87), (1.99,0.89), (2,0.91), (2,0.94), (2,0.96), (2,0.98), (2,1.01), (2,1.03), (2,1.05), (2,1.08), (1.99,1.10), (1.99,1.13), (1.99,1.15), (1.99,1.17), (1.98,1.20), (1.98,1.22), (1.97,1.24), (1.96,1.26), (1.96,1.29), (1.95,1.31), (1.94,1.33), (1.94,1.35), (1.93,1.38), (1.92,1.40), (1.91,1.42), (1.90,1.44), (1.89,1.46), (1.88,1.48), (1.86,1.50), (1.85,1.52), (1.84,1.54), (1.83,1.56), (1.81,1.58), (1.80,1.60), (1.79,1.62), (1.77,1.64), (1.76,1.66), (1.74,1.67), (1.72,1.69), (1.71,1.71), (1.69,1.72), (1.67,1.74), (1.66,1.76), (1.64,1.77), (1.62,1.79), (1.60,1.80), (1.58,1.81), (1.56,1.83), (1.54,1.84), (1.52,1.85), (1.50,1.86), (1.48,1.88), (1.46,1.89), (1.44,1.90), (1.42,1.91), (1.40,1.92), (1.38,1.93), (1.35,1.94), (1.33,1.94), (1.31,1.95), (1.29,1.96), (1.26,1.96), (1.24,1.97), (1.22,1.98), (1.20,1.98), (1.17,1.99), (1.15,1.99), (1.13,1.99), (1.10,1.99), (1.08,2), (1.05,2), (1.03,2), (1.01,2), (0.98,2), (0.96,2), (0.94,2), (0.91,2), (0.89,1.99), (0.87,1.99), (0.84,1.99), (0.82,1.98), (0.80,1.98), (0.77,1.97), (0.75,1.97), (0.73,1.96), (0.71,1.96), (0.68,1.95), (0.66,1.94), (0.64,1.93), (0.62,1.92), (0.60,1.91), (0.57,1.90), (0.55,1.89), (0.53,1.88), (0.51,1.87), (0.49,1.86), (0.47,1.85), (0.45,1.84), (0.43,1.82), (0.41,1.81), (0.39,1.79), (0.37,1.78), (0.36,1.77), (0.34,1.75), (0.32,1.73), (0.30,1.72), (0.29,1.70), (0.27,1.68), (0.26,1.67), (0.24,1.65), (0.22,1.63), (0.21,1.61), (0.20,1.59), (0.18,1.58), (0.17,1.56), (0.16,1.54), (0.14,1.52), (0.13,1.50), (0.12,1.47), (0.11,1.45), (0.10,1.43), (0.09,1.41), (0.08,1.39), (0.07,1.37), (0.06,1.35), (0.05,1.32), (0.05,1.30), (0.04,1.28), (0.03,1.26), (0.03,1.23), (0.02,1.21), (0.02,1.19), (0.01,1.16), (0.01,1.14), (0.01,1.12), (0,1.09), (0,1.07), (0,1.05), (0,1.02), (0,1), (-0,1.02), (-0,1.05), (-0,1.07), (-0,1.09), (-0.01,1.12), (-0.01,1.14), (-0.01,1.16), (-0.02,1.19), (-0.02,1.21), (-0.03,1.23), (-0.03,1.26), (-0.04,1.28), (-0.05,1.30), (-0.05,1.32), (-0.06,1.35), (-0.07,1.37), (-0.08,1.39), (-0.09,1.41), (-0.10,1.43), (-0.11,1.45), (-0.12,1.47), (-0.13,1.50), (-0.14,1.52), (-0.16,1.54), (-0.17,1.56), (-0.18,1.58), (-0.20,1.59), (-0.21,1.61), (-0.22,1.63), (-0.24,1.65), (-0.26,1.67), (-0.27,1.68), (-0.29,1.70), (-0.30,1.72), (-0.32,1.73), (-0.34,1.75), (-0.36,1.77), (-0.37,1.78), (-0.39,1.79), (-0.41,1.81), (-0.43,1.82), (-0.45,1.84), (-0.47,1.85), (-0.49,1.86), (-0.51,1.87), (-0.53,1.88), (-0.55,1.89), (-0.57,1.90), (-0.60,1.91), (-0.62,1.92), (-0.64,1.93), (-0.66,1.94), (-0.68,1.95), (-0.71,1.96), (-0.73,1.96), (-0.75,1.97), (-0.77,1.97), (-0.80,1.98), (-0.82,1.98), (-0.84,1.99), (-0.87,1.99), (-0.89,1.99), (-0.91,2), (-0.94,2), (-0.96,2), (-0.98,2), (-1.01,2), (-1.03,2), (-1.05,2), (-1.08,2), (-1.10,1.99), (-1.13,1.99), (-1.15,1.99), (-1.17,1.99), (-1.20,1.98), (-1.22,1.98), (-1.24,1.97), (-1.26,1.96), (-1.29,1.96), (-1.31,1.95), (-1.33,1.94), (-1.35,1.94), (-1.38,1.93), (-1.40,1.92), (-1.42,1.91), (-1.44,1.90), (-1.46,1.89), (-1.48,1.88), (-1.50,1.86), (-1.52,1.85), (-1.54,1.84), (-1.56,1.83), (-1.58,1.81), (-1.60,1.80), (-1.62,1.79), (-1.64,1.77), (-1.66,1.76), (-1.67,1.74), (-1.69,1.72), (-1.71,1.71), (-1.72,1.69), (-1.74,1.67), (-1.76,1.66), (-1.77,1.64), (-1.79,1.62), (-1.80,1.60), (-1.81,1.58), (-1.83,1.56), (-1.84,1.54), (-1.85,1.52), (-1.86,1.50), (-1.88,1.48), (-1.89,1.46), (-1.90,1.44), (-1.91,1.42), (-1.92,1.40), (-1.93,1.38), (-1.94,1.35), (-1.94,1.33), (-1.95,1.31), (-1.96,1.29), (-1.96,1.26), (-1.97,1.24), (-1.98,1.22), (-1.98,1.20), (-1.99,1.17), (-1.99,1.15), (-1.99,1.13), (-1.99,1.10), (-2,1.08), (-2,1.05), (-2,1.03), (-2,1.01), (-2,0.98), (-2,0.96), (-2,0.94), (-2,0.91), (-1.99,0.89), (-1.99,0.87), (-1.99,0.84), (-1.98,0.82), (-1.98,0.80), (-1.97,0.77), (-1.97,0.75), (-1.96,0.73), (-1.96,0.71), (-1.95,0.68), (-1.94,0.66), (-1.93,0.64), (-1.92,0.62), (-1.91,0.60), (-1.90,0.57), (-1.89,0.55), (-1.88,0.53), (-1.87,0.51), (-1.86,0.49), (-1.85,0.47), (-1.84,0.45), (-1.82,0.43), (-1.81,0.41), (-1.79,0.39), (-1.78,0.37), (-1.77,0.36), (-1.75,0.34), (-1.73,0.32), (-1.72,0.30), (-1.70,0.29), (-1.68,0.27), (-1.67,0.26), (-1.65,0.24), (-1.63,0.22), (-1.61,0.21), (-1.59,0.20), (-1.58,0.18), (-1.56,0.17), (-1.54,0.16), (-1.52,0.14), (-1.50,0.13), (-1.47,0.12), (-1.45,0.11), (-1.43,0.10), (-1.41,0.09), (-1.39,0.08), (-1.37,0.07), (-1.35,0.06), (-1.32,0.05), (-1.30,0.05), (-1.28,0.04), (-1.26,0.03), (-1.23,0.03), (-1.21,0.02), (-1.19,0.02), (-1.16,0.01), (-1.14,0.01), (-1.12,0.01), (-1.09,0), (-1.07,0), (-1.05,0), (-1.02,0), (-1,0), (-1.02,-0), (-1.05,-0), (-1.07,-0), (-1.09,-0), (-1.12,-0.01), (-1.14,-0.01), (-1.16,-0.01), (-1.19,-0.02), (-1.21,-0.02), (-1.23,-0.03), (-1.26,-0.03), (-1.28,-0.04), (-1.30,-0.05), (-1.32,-0.05), (-1.35,-0.06), (-1.37,-0.07), (-1.39,-0.08), (-1.41,-0.09), (-1.43,-0.10), (-1.45,-0.11), (-1.47,-0.12), (-1.50,-0.13), (-1.52,-0.14), (-1.54,-0.16), (-1.56,-0.17), (-1.58,-0.18), (-1.59,-0.20), (-1.61,-0.21), (-1.63,-0.22), (-1.65,-0.24), (-1.67,-0.26), (-1.68,-0.27), (-1.70,-0.29), (-1.72,-0.30), (-1.73,-0.32), (-1.75,-0.34), (-1.77,-0.36), (-1.78,-0.37), (-1.79,-0.39), (-1.81,-0.41), (-1.82,-0.43), (-1.84,-0.45), (-1.85,-0.47), (-1.86,-0.49), (-1.87,-0.51), (-1.88,-0.53), (-1.89,-0.55), (-1.90,-0.57), (-1.91,-0.60), (-1.92,-0.62), (-1.93,-0.64), (-1.94,-0.66), (-1.95,-0.68), (-1.96,-0.71), (-1.96,-0.73), (-1.97,-0.75), (-1.97,-0.77), (-1.98,-0.80), (-1.98,-0.82), (-1.99,-0.84), (-1.99,-0.87), (-1.99,-0.89), (-2,-0.91), (-2,-0.94), (-2,-0.96), (-2,-0.98), (-2,-1.01), (-2,-1.03), (-2,-1.05), (-2,-1.08), (-1.99,-1.10), (-1.99,-1.13), (-1.99,-1.15), (-1.99,-1.17), (-1.98,-1.20), (-1.98,-1.22), (-1.97,-1.24), (-1.96,-1.26), (-1.96,-1.29), (-1.95,-1.31), (-1.94,-1.33), (-1.94,-1.35), (-1.93,-1.38), (-1.92,-1.40), (-1.91,-1.42), (-1.90,-1.44), (-1.89,-1.46), (-1.88,-1.48), (-1.86,-1.50), (-1.85,-1.52), (-1.84,-1.54), (-1.83,-1.56), (-1.81,-1.58), (-1.80,-1.60), (-1.79,-1.62), (-1.77,-1.64), (-1.76,-1.66), (-1.74,-1.67), (-1.72,-1.69), (-1.71,-1.71), (-1.69,-1.72), (-1.67,-1.74), (-1.66,-1.76), (-1.64,-1.77), (-1.62,-1.79), (-1.60,-1.80), (-1.58,-1.81), (-1.56,-1.83), (-1.54,-1.84), (-1.52,-1.85), (-1.50,-1.86), (-1.48,-1.88), (-1.46,-1.89), (-1.44,-1.90), (-1.42,-1.91), (-1.40,-1.92), (-1.38,-1.93), (-1.35,-1.94), (-1.33,-1.94), (-1.31,-1.95), (-1.29,-1.96), (-1.26,-1.96), (-1.24,-1.97), (-1.22,-1.98), (-1.20,-1.98), (-1.17,-1.99), (-1.15,-1.99), (-1.13,-1.99), (-1.10,-1.99), (-1.08,-2), (-1.05,-2), (-1.03,-2), (-1.01,-2), (-0.98,-2), (-0.96,-2), (-0.94,-2), (-0.91,-2), (-0.89,-1.99), (-0.87,-1.99), (-0.84,-1.99), (-0.82,-1.98), (-0.80,-1.98), (-0.77,-1.97), (-0.75,-1.97), (-0.73,-1.96), (-0.71,-1.96), (-0.68,-1.95), (-0.66,-1.94), (-0.64,-1.93), (-0.62,-1.92), (-0.60,-1.91), (-0.57,-1.90), (-0.55,-1.89), (-0.53,-1.88), (-0.51,-1.87), (-0.49,-1.86), (-0.47,-1.85), (-0.45,-1.84), (-0.43,-1.82), (-0.41,-1.81), (-0.39,-1.79), (-0.37,-1.78), (-0.36,-1.77), (-0.34,-1.75), (-0.32,-1.73), (-0.30,-1.72), (-0.29,-1.70), (-0.27,-1.68), (-0.26,-1.67), (-0.24,-1.65), (-0.22,-1.63), (-0.21,-1.61), (-0.20,-1.59), (-0.18,-1.58), (-0.17,-1.56), (-0.16,-1.54), (-0.14,-1.52), (-0.13,-1.50), (-0.12,-1.47), (-0.11,-1.45), (-0.10,-1.43), (-0.09,-1.41), (-0.08,-1.39), (-0.07,-1.37), (-0.06,-1.35), (-0.05,-1.32), (-0.05,-1.30), (-0.04,-1.28), (-0.03,-1.26), (-0.03,-1.23), (-0.02,-1.21), (-0.02,-1.19), (-0.01,-1.16), (-0.01,-1.14), (-0.01,-1.12), (-0,-1.09), (-0,-1.07), (-0,-1.05), (-0,-1.02), (-0,-1), (0,-1.02), (0,-1.05), (0,-1.07), (0,-1.09), (0.01,-1.12), (0.01,-1.14), (0.01,-1.16), (0.02,-1.19), (0.02,-1.21), (0.03,-1.23), (0.03,-1.26), (0.04,-1.28), (0.05,-1.30), (0.05,-1.32), (0.06,-1.35), (0.07,-1.37), (0.08,-1.39), (0.09,-1.41), (0.10,-1.43), (0.11,-1.45), (0.12,-1.47), (0.13,-1.50), (0.14,-1.52), (0.16,-1.54), (0.17,-1.56), (0.18,-1.58), (0.20,-1.59), (0.21,-1.61), (0.22,-1.63), (0.24,-1.65), (0.26,-1.67), (0.27,-1.68), (0.29,-1.70), (0.30,-1.72), (0.32,-1.73), (0.34,-1.75), (0.36,-1.77), (0.37,-1.78), (0.39,-1.79), (0.41,-1.81), (0.43,-1.82), (0.45,-1.84), (0.47,-1.85), (0.49,-1.86), (0.51,-1.87), (0.53,-1.88), (0.55,-1.89), (0.57,-1.90), (0.60,-1.91), (0.62,-1.92), (0.64,-1.93), (0.66,-1.94), (0.68,-1.95), (0.71,-1.96), (0.73,-1.96), (0.75,-1.97), (0.77,-1.97), (0.80,-1.98), (0.82,-1.98), (0.84,-1.99), (0.87,-1.99), (0.89,-1.99), (0.91,-2), (0.94,-2), (0.96,-2), (0.98,-2), (1.01,-2), (1.03,-2), (1.05,-2), (1.08,-2), (1.10,-1.99), (1.13,-1.99), (1.15,-1.99), (1.17,-1.99), (1.20,-1.98), (1.22,-1.98), (1.24,-1.97), (1.26,-1.96), (1.29,-1.96), (1.31,-1.95), (1.33,-1.94), (1.35,-1.94), (1.38,-1.93), (1.40,-1.92), (1.42,-1.91), (1.44,-1.90), (1.46,-1.89), (1.48,-1.88), (1.50,-1.86), (1.52,-1.85), (1.54,-1.84), (1.56,-1.83), (1.58,-1.81), (1.60,-1.80), (1.62,-1.79), (1.64,-1.77), (1.66,-1.76), (1.67,-1.74), (1.69,-1.72), (1.71,-1.71), (1.72,-1.69), (1.74,-1.67), (1.76,-1.66), (1.77,-1.64), (1.79,-1.62), (1.80,-1.60), (1.81,-1.58), (1.83,-1.56), (1.84,-1.54), (1.85,-1.52), (1.86,-1.50), (1.88,-1.48), (1.89,-1.46), (1.90,-1.44), (1.91,-1.42), (1.92,-1.40), (1.93,-1.38), (1.94,-1.35), (1.94,-1.33), (1.95,-1.31), (1.96,-1.29), (1.96,-1.26), (1.97,-1.24), (1.98,-1.22), (1.98,-1.20), (1.99,-1.17), (1.99,-1.15), (1.99,-1.13), (1.99,-1.10), (2,-1.08), (2,-1.05), (2,-1.03), (2,-1.01), (2,-0.98), (2,-0.96), (2,-0.94), (2,-0.91), (1.99,-0.89), (1.99,-0.87), (1.99,-0.84), (1.98,-0.82), (1.98,-0.80), (1.97,-0.77), (1.97,-0.75), (1.96,-0.73), (1.96,-0.71), (1.95,-0.68), (1.94,-0.66), (1.93,-0.64), (1.92,-0.62), (1.91,-0.60), (1.90,-0.57), (1.89,-0.55), (1.88,-0.53), (1.87,-0.51), (1.86,-0.49), (1.85,-0.47), (1.84,-0.45), (1.82,-0.43), (1.81,-0.41), (1.79,-0.39), (1.78,-0.37), (1.77,-0.36), (1.75,-0.34), (1.73,-0.32), (1.72,-0.30), (1.70,-0.29), (1.68,-0.27), (1.67,-0.26), (1.65,-0.24), (1.63,-0.22), (1.61,-0.21), (1.59,-0.20), (1.58,-0.18), (1.56,-0.17), (1.54,-0.16), (1.52,-0.14), (1.50,-0.13), (1.47,-0.12), (1.45,-0.11), (1.43,-0.10), (1.41,-0.09), (1.39,-0.08), (1.37,-0.07), (1.35,-0.06), (1.32,-0.05), (1.30,-0.05), (1.28,-0.04), (1.26,-0.03), (1.23,-0.03), (1.21,-0.02), (1.19,-0.02), (1.16,-0.01), (1.14,-0.01), (1.12,-0.01), (1.09,-0), (1.07,-0), (1.05,-0), (1.02,-0), (1,-0)))
        register_shape("Heart",((0,0), (-0,-0.71), (0.50,0.16), (0.50,0.17), (0.50,0.17), (0.50,0.18), (0.50,0.19), (0.50,0.19), (0.50,0.20), (0.50,0.20), (0.49,0.21), (0.49,0.22), (0.49,0.22), (0.49,0.23), (0.49,0.24), (0.49,0.24), (0.48,0.25), (0.48,0.25), (0.48,0.26), (0.48,0.27), (0.47,0.27), (0.47,0.28), (0.47,0.28), (0.46,0.29), (0.46,0.30), (0.46,0.30), (0.45,0.31), (0.45,0.31), (0.44,0.32), (0.44,0.32), (0.44,0.33), (0.43,0.33), (0.43,0.34), (0.42,0.34), (0.42,0.34), (0.41,0.35), (0.41,0.35), (0.40,0.36), (0.40,0.36), (0.39,0.37), (0.39,0.37), (0.38,0.37), (0.38,0.38), (0.37,0.38), (0.36,0.38), (0.36,0.38), (0.35,0.39), (0.35,0.39), (0.34,0.39), (0.33,0.39), (0.33,0.40), (0.32,0.40), (0.31,0.40), (0.31,0.40), (0.30,0.40), (0.30,0.40), (0.29,0.41), (0.28,0.41), (0.28,0.41), (0.27,0.41), (0.26,0.41), (0.26,0.41), (0.25,0.41), (0.24,0.41), (0.24,0.41), (0.23,0.41), (0.22,0.41), (0.22,0.41), (0.21,0.41), (0.20,0.40), (0.20,0.40), (0.19,0.40), (0.19,0.40), (0.18,0.40), (0.17,0.40), (0.17,0.39), (0.16,0.39), (0.15,0.39), (0.15,0.39), (0.14,0.38), (0.14,0.38), (0.13,0.38), (0.13,0.38), (0.12,0.37), (0.11,0.37), (0.11,0.37), (0.10,0.36), (0.10,0.36), (0.09,0.35), (0.09,0.35), (0.08,0.34), (0.08,0.34), (0.07,0.34), (0.07,0.33), (0.06,0.33), (0.06,0.32), (0.06,0.32), (0.05,0.31), (0.05,0.31), (0.04,0.30), (0.04,0.30), (0.04,0.29), (0.03,0.28), (0.03,0.28), (0.03,0.27), (0.02,0.27), (0.02,0.26), (0.02,0.25), (0.02,0.25), (0.01,0.24), (0.01,0.24), (0.01,0.23), (0.01,0.22), (0.01,0.22), (0.01,0.21), (0,0.20), (0,0.20), (0,0.19), (0,0.19), (0,0.18), (0,0.17), (0,0.17), (0,0.16), (-0,0.17), (-0,0.17), (-0,0.18), (-0,0.19), (-0,0.19), (-0,0.20), (-0,0.20), (-0.01,0.21), (-0.01,0.22), (-0.01,0.22), (-0.01,0.23), (-0.01,0.24), (-0.01,0.24), (-0.02,0.25), (-0.02,0.25), (-0.02,0.26), (-0.02,0.27), (-0.03,0.27), (-0.03,0.28), (-0.03,0.28), (-0.04,0.29), (-0.04,0.30), (-0.04,0.30), (-0.05,0.31), (-0.05,0.31), (-0.06,0.32), (-0.06,0.32), (-0.06,0.33), (-0.07,0.33), (-0.07,0.34), (-0.08,0.34), (-0.08,0.34), (-0.09,0.35), (-0.09,0.35), (-0.10,0.36), (-0.10,0.36), (-0.11,0.37), (-0.11,0.37), (-0.12,0.37), (-0.12,0.38), (-0.13,0.38), (-0.14,0.38), (-0.14,0.38), (-0.15,0.39), (-0.15,0.39), (-0.16,0.39), (-0.17,0.39), (-0.17,0.40), (-0.18,0.40), (-0.19,0.40), (-0.19,0.40), (-0.20,0.40), (-0.20,0.40), (-0.21,0.41), (-0.22,0.41), (-0.22,0.41), (-0.23,0.41), (-0.24,0.41), (-0.24,0.41), (-0.25,0.41), (-0.26,0.41), (-0.26,0.41), (-0.27,0.41), (-0.28,0.41), (-0.28,0.41), (-0.29,0.41), (-0.30,0.40), (-0.30,0.40), (-0.31,0.40), (-0.31,0.40), (-0.32,0.40), (-0.33,0.40), (-0.33,0.39), (-0.34,0.39), (-0.35,0.39), (-0.35,0.39), (-0.36,0.38), (-0.36,0.38), (-0.37,0.38), (-0.37,0.38), (-0.38,0.37), (-0.39,0.37), (-0.39,0.37), (-0.40,0.36), (-0.40,0.36), (-0.41,0.35), (-0.41,0.35), (-0.42,0.34), (-0.42,0.34), (-0.43,0.34), (-0.43,0.33), (-0.44,0.33), (-0.44,0.32), (-0.44,0.32), (-0.45,0.31), (-0.45,0.31), (-0.46,0.30), (-0.46,0.30), (-0.46,0.29), (-0.47,0.28), (-0.47,0.28), (-0.47,0.27), (-0.48,0.27), (-0.48,0.26), (-0.48,0.25), (-0.48,0.25), (-0.49,0.24), (-0.49,0.24), (-0.49,0.23), (-0.49,0.22), (-0.49,0.22), (-0.49,0.21), (-0.50,0.20), (-0.50,0.20), (-0.50,0.19), (-0.50,0.19), (-0.50,0.18), (-0.50,0.17), (-0.50,0.17), (-0.50,0.16), (-0,-0.71)))
        global cursor
        global startLength
        cursor = Turtle()
        startLength = screensize()[1]
        cursor.width(12)
        cursor.hideturtle()

    def change(self, C1, C2, i,
               Fade):  ##This calculates the difference between the colors that its going between, and finds out how much it needs to change each time
        distance = startLength / Fade
        red = int(C1[0] + ((C2[0] - C1[0]) / distance) * i)
        green = int(C1[1] + ((C2[1] - C1[1]) / distance) * i)
        blue = int(C1[2] + ((C2[2] - C1[2]) / distance) * i)
        cursor.color((red, green, blue))

    def move(self, x, y):  ##moves the turtle somewhere without leaving a line
        cursor.up()
        cursor.goto(x, y)
        cursor.down()

    def Circle(self, radius,
               degree):  ## Custom Circle function cuz Turtle's default one is really slow and poorly optimized for smaller sizes
        cursor.down()
        mult = radius / abs(radius)
        for x in range(int(degree / 2)):
            cursor.left(mult)
            cursor.forward((2 * math.pi * radius) / 360)
            cursor.left(mult)

    ################################################################################
    ######                     Shape Definitions                               #####
    ################################################################################

    def flower(self, Fade, Colors):
        self.move(-startLength / 2, startLength / 2)
        cursor.setheading(0)
        for x in range(Fade):
            C1 = Colors[x]
            C2 = Colors[x + 1]
            for i in range(int(startLength / Fade)):
                self.change(C1, C2, i, Fade)
                cursor.forward(startLength - (startLength / Fade) * x - i)
                cursor.right(105)
        update()
         

    def circle1(self, Fade, Colors):
        self.move(0, 0)
        cursor.pensize(4)
        for x in range(Fade):
            C1 = Colors[x]
            C2 = Colors[x + 1]
            for i in range(int(startLength / Fade)):
                self.change(C1, C2, i, Fade)
                self.Circle(startLength, 180)
                self.Circle(-startLength, 180)
                cursor.right(360 / startLength)
        update()
         

    def circle2(self, Fade, Colors):
        cursor.left(90)
        for x in range(Fade):
            C1 = Colors[x]
            C2 = Colors[x + 1]
            for i in range(int(startLength / Fade)):
                self.change(C1, C2, i, Fade)
                cursor.dot(2*(startLength - (startLength / Fade) * x - i))
                cursor.forward(1 / (10 * startLength))
        update()
         

    def polygon(self, Fade, Colors):
        Point=-1
        while Point==-1:
            Point = askinteger("Polygon", "How many sides do you want",initialvalue=-1)
        cursor.up()
        cursor.goto(math.cos(0), math.sin(0))
        cursor.begin_poly()
        for p in range(Point):
            cursor.goto(math.cos(math.radians(360 / Point) * p), math.sin(math.radians(360 / Point) * p))
        cursor.end_poly()
        register_shape("Polygon", cursor.get_poly())
        cursor.down()
        cursor.shape("Polygon")
        cursor.setheading(90)
        for x in range(Fade):
            C1 = Colors[x]
            C2 = Colors[x + 1]
            for i in range(int(startLength / Fade)):
                self.change(C1, C2, i, Fade)
                cursor.shapesize(startLength - (startLength / Fade) * x - i)
                cursor.stamp()
        update()
         

    def polygonswirl(self, Fade, Colors):
        Point=-1
        while Point==-1:
            Point = askinteger("Polygon", "How many sides do you want",initialvalue=3)
        Rotate=-1
        while Rotate==-1:
            Rotate = askinteger("Polygon", "How many degrees do you want it to rotate total",initialvalue=360)
        Rotate/=startLength
        cursor.up()
        cursor.goto(math.cos(0), math.sin(0))
        cursor.begin_poly()
        for p in range(Point):
            cursor.goto(math.cos(math.radians(360 / Point) * p), math.sin(math.radians(360 / Point) * p))
        cursor.end_poly()
        register_shape("Polygon", cursor.get_poly())
        cursor.down()
        cursor.shape("Polygon")
        cursor.setheading(90)
        for x in range(Fade):
            C1 = Colors[x]
            C2 = Colors[x + 1]
            for i in range(int(startLength / Fade)):
                self.change(C1, C2, i, Fade)
                cursor.shapesize(startLength - (startLength / Fade) * x - i)
                cursor.stamp()
                cursor.right(Rotate)
        update()
         

    def cone(self, Fade, Colors):
        cursor.setheading(0)
        self.move(0, 0)
        for x in range(Fade):
            C1 = Colors[x]
            C2 = Colors[x + 1]
            for i in range(int(startLength / Fade)):
                self.change(C1, C2, i, Fade)
                cursor.dot(startLength - (startLength / Fade) * x - i)
                cursor.forward(1)
        update()
         

    def doublecone(self, Fade, Colors):
        cursor.setheading(0)
        cursor.width(1)
        self.move(-startLength, 0)
        for x in range(Fade):
            C1 = Colors[x]
            C2 = Colors[x + 1]
            for i in range(int(startLength / Fade)):
                self.change(C1, C2, i, Fade)
                cursor.dot(startLength - (startLength / Fade)*x - i)
                cursor.forward(1)
        cursor.forward(2)
        cursor.width(4)
        for x in range(Fade):
            C2 = Colors[len(Colors) - x - 1]
            C1 = Colors[len(Colors) - x - 2]
            for i in range(int(startLength / Fade)):
                cursor.width(width() + .55)
                self.change(C1, C2, i, Fade)
                cursor.up()
                cursor.forward(.5)
                cursor.right(90)
                self.Circle((startLength / Fade) * x + i + 1, 360)
                cursor.left(90)
        update()
         

    def yinyang(self, Fade, Colors):
        cursor.setheading(0)
        self.move(0, 0)
        Fade -= 1
        for x in range(Fade):
            C1 = Colors[x]
            C2 = Colors[x + 1]
            for i in range(int(180 / Fade)):
                self.change(C1, C2, i * startLength / 360, Fade)
                self.Circle(startLength, 180)
                self.Circle(-startLength, 180)
                cursor.left(180)
                self.Circle(startLength, 180)
                self.Circle(-startLength, 180)
                cursor.left(181)
        update()
         

    def heart(self, Fade, Colors):
        self.move(0, 0)
        cursor.setheading(90)
        cursor.shape("Heart")
        for x in range(Fade):
            C1 = Colors[x]
            C2 = Colors[x + 1]
            for i in range(int(startLength / Fade)):
                self.change(C1, C2, i, Fade)
                cursor.shapesize((startLength - (startLength / Fade) * x - i))
                cursor.stamp()
        update()

    def quatre(self, Fade, Colors):
        self.move(0, 0)
        cursor.setheading(180)
        cursor.shape("Quatre")
        for x in range(Fade):
            C1 = Colors[x]
            C2 = Colors[x + 1]
            for i in range(int(startLength / Fade)):
                self.change(C1, C2, i, Fade)
                cursor.shapesize((startLength - (startLength / Fade) * x - i) / 3)
                cursor.stamp()
        update()

Draw = DrawClass()

RADIOS = [("flower", Draw.flower, 1),
          ("circle1", Draw.circle1, 2),
          ("circle2", Draw.circle2, 3),
          ("polygon", Draw.polygon, 4),
          ("polygon-swirl", Draw.polygonswirl, 5),
          ("cone", Draw.cone, 6),
          ("doublecone", Draw.doublecone, 7),
          ("yinyang", Draw.yinyang, 8),
          ("heart", Draw.heart, 9),
          ("quatrefoil", Draw.quatre, 10)]

for name, func, ind in RADIOS:
    Radiobutton(panel, text=name, variable=selectionShape, value=ind, indicatoron=0, command=btn_click)\
        .grid(row=ind, column=0)

def get_shape():
    global selectionShape
    print(selectionShape.get())

def draw():
    global colorC, selectionShape
    sent_matrix = []
    for _x in range(colorC):
        sent_matrix += [colorMatrix[_x]]
    for reverse in range(len(sent_matrix) - 1):
        sent_matrix += [sent_matrix[len(sent_matrix) - (2 * reverse + 2)]]

    RADIOS[selectionShape.get()-1 ][1](colorC - 1, sent_matrix)

def color_buttons(_x):
    global cButtonList, colorC
    _x = int(_x)
    colorC = _x
    for y in range(len(cButtonList)):
        cButtonList[0].grid_remove()
        cButtonList.remove(cButtonList[0])
    for y in range(_x):
        cButtonList += [Button(panel, text="Color " + str(y), command=functools.partial(color_button, y))]
        cButtonList[y].grid(row=12, column=y + 2)

def color_button(color_num):
    global colorMatrix
    temp = askcolor()
    colorMatrix[color_num] = [int(temp[0][0]), int(temp[0][1]), int(temp[0][2])]
def clear_button():
    cursor.reset()
    cursor.width(12)
    cursor.shape("classic")
    cursor.hideturtle()
    print(cursor.shape())
    
cButtonList = [Button(panel, text="OK", command=color_button)]
bu = Button(panel, text="Draw", command=draw, height=4, width=8)
bu.grid(row=1, column=2,rowspan=3,columnspan=3)
bu = Button(panel, text="Erase", command=clear_button)
bu.grid(row=5, column=2)
w = Scale(panel, from_=1, to=30, length=300, label="Color Amount", command=color_buttons)
w.grid(row=0, column=1, rowspan=10)

mainloop()
